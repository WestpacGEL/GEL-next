Supporting text sits below the field, it can be a character count, or validated feedback of the information that has been entered.

### Types

```tsx
<InputGroup width="20" label="Supporting text" supportingText="I am supporting text">
  <Input />
</InputGroup>
```

### Usage examples

```tsx
() => {
  const MAX_LENGTH = 250;
  const [inputValue, setInputValue] = useState<string>('');
  const counterText = useMemo(() => {
    const lengthLeft = MAX_LENGTH - inputValue.length;
    return `${lengthLeft} remaining`;
  }, [inputValue]);

  return (
    <InputGroup label="Comments" hint="Supporting text used for character count" supportingText={counterText}>
      <Textarea onChange={({ target: { value } }) => setInputValue(value)} value={inputValue} />
    </InputGroup>
  );
};
```

```tsx
() => {
  const [inputValue, setInputValue] = useState<string>('');
  const [validating, setValidating] = useState<boolean>(false);
  const [error, setError] = useState<string>();
  const validate = useCallback(() => {
    setValidating(true);
    setError(undefined);
    setTimeout(() => {
      if (inputValue !== '647453') {
        setError('Routing number not found');
      }
      setValidating(false);
    }, 1500);
  }, [inputValue]);

  return (
    <InputGroup width="20"
      label="Enter ABA routing number"
      hint="For a valid response use: 647453, all other numbers will show the invalid response"
      after={validating ? { icon: ProgressIndicator } : <Button onClick={validate}>Check</Button>}
      errorMessage={error}
    >
      <Input invalid={!!error} onChange={({ target: { value } }) => setInputValue(value)} value={inputValue} />
    </InputGroup>
  );
};
```
