### ButtonGroup sizes

```jsx
<ButtonGroup 
  buttons={[
    { value: "Left", label: "Left"}, 
    { value: "Middle", label: "Middle" }, 
    { value: "Right", label: "Right"}
  ]} 
/>

```

### ButtonGroup looks

```jsx
<div className="grid gap-3">
  <ButtonGroup
    defaultValue={0}
    label={<p className="typography-body-10 text-text-muted italic mb-[0.875rem]">Index (integer)</p>}
    buttons={[
      { value: 0, label: "Left" }, 
      { value: 1, label: "Middle" }, 
      { value: 2, label: "Right"}
    ]}
  />
  <ButtonGroup
    defaultValue="right"
    label={<p className="typography-body-10 text-text-muted italic mb-[0.875rem]">Key (string)</p>}
    buttons={[
      { value: "left", label: "Left" }, 
      { value: "middle", label: "Middle" }, 
      { value: "right", label: "Right"}
    ]}
  />
</div>
```

### With onChange

```jsx
() => {
  const [controlled, setControlled] = useState();

  return (
    <div className="grid gap-2">
      <div className="flex gap-1">
        <Button type="button" onClick={() => setControlled('yes')} size="small">
          Set to "yes"
        </Button>
        <Button type="button" onClick={() => setControlled('maybe')} size="small">
          Set to "maybe"
        </Button>
        <Button type="button" onClick={() => setControlled('no')} size="small">
          Set to "no"
        </Button>
        <Button type="button" onClick={() => setControlled('')} size="small">
          reset
        </Button>
      </div>
      <ButtonGroup 
        look="hero" 
        value={controlled}
        buttons={[
          { value: "yes", label: "Yes"}, 
          { value: "maybe", label: "Maybe" }, 
          { value: "no", label: "No"}
        ]}
      />
    </div>
  );
};
```
