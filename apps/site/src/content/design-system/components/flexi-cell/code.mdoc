## Flexi Cell

### Default usage

```jsx
<FlexiCell tag="a" href="#" withBorder body after="after" before="before">
  <FlexiCell.Label tag="h3">Label</FlexiCell.Label>
  <FlexiCell.Hint>Hint</FlexiCell.Hint>
</FlexiCell>
```

### With NextJS Link usage

```jsx
<NextLink href="#test" passHref legacyBehavior>
  <FlexiCell tag="a" href="#" withBorder body after="after" before="before">
    <FlexiCell.Label tag="h3">Label</FlexiCell.Label>
    <FlexiCell.Hint>Hint</FlexiCell.Hint>
  </FlexiCell>
</NextLink>
```

### Credit card usage

```jsx
<FlexiCell
  tag="a"
  href="#"
  withBorder
  body
  after={
    <FlexiCell.Adornment align="top">
      <FlexiCell.Label tag="h3">$9,999.99</FlexiCell.Label>
      <FlexiCell.Hint>avail $9,999.99</FlexiCell.Hint>
    </FlexiCell.Adornment>
  }
>
  <FlexiCell.Label tag="h3">Credit card</FlexiCell.Label>
  <FlexiCell.Hint>Card ending in 1234</FlexiCell.Hint>
</FlexiCell>
```

### Account usage

```jsx
<FlexiCell
  tag="a"
  href="#"
  withBorder
  body
  after={
    <FlexiCell.Adornment align="top">
      <FlexiCell.Label tag="h3">$9,999.99</FlexiCell.Label>
    </FlexiCell.Adornment>
  }
>
  <FlexiCell.Label tag="h3">Account</FlexiCell.Label>
  <FlexiCell.Hint>032-123 12345678</FlexiCell.Hint>
</FlexiCell>
```

### Payee usage

```jsx
<FlexiCell
  tag="a"
  href="#"
  withBorder
  body
  before={
    <Circle className="bg-primary text-white" aria-label="Bruce">
      B
    </Circle>
  }
  after={
    <FlexiCell.Adornment align="center">
      <FlexiCell.Hint className="text-muted">Fri 5 Aug</FlexiCell.Hint>
    </FlexiCell.Adornment>
  }
>
  <h3 className="typography-body-8 font-normal">Payee</h3>
  <small className="text-muted">Payee details</small>
</FlexiCell>
```

### Payee with info usage

```jsx
<FlexiCell
  withBorder
  body
  before={
    <Circle className="bg-muted text-white" aria-label="Walter White">
      WW
    </Circle>
  }
  after={
    <FlexiCell.Adornment align="center">
      <Button look="link" href="/somewhere" iconBefore={InfoIcon} aria-label="more info" />
    </FlexiCell.Adornment>
  }
>
  <a href="#" className="group text-[inherit] decoration-[inherit] focus:focus-outline">
    <h3 className="typography-body-8 font-normal">Payee</h3>
    <small className="text-muted">Payee details</small>
  </a>
</FlexiCell>
```

### Flag payee usage

```jsx
<FlexiCell
  withBorder
  body
  before={<div>Flag</div>}
  after={
    <FlexiCell.Adornment align="center">
      <Button look="link" href="/somewhere" iconBefore={InfoIcon} aria-label="more info" />
    </FlexiCell.Adornment>
  }
>
  <a href="#" className="group text-[inherit] decoration-[inherit] focus:focus-outline">
    <h3 className="typography-body-8 font-normal">Payee</h3>
    <small className="text-muted">Payee details</small>
  </a>
</FlexiCell>
```

### List item with flag usage

```jsx
<FlexiCell tag="a" href="#" withBorder body before={<div>Flag</div>}>
  <h3 className="typography-body-8 font-normal">List item</h3>
</FlexiCell>
```

### List item usage

```jsx
<FlexiCell tag="a" href="#" withBorder body>
  <h3 className="typography-body-8 font-normal">List item</h3>
</FlexiCell>
```

### Westpac special product usage

```jsx
<FlexiCell
  tag="a"
  href="#"
  withBorder
  body
  after={
    <FlexiCell.Adornment align="top">
      <ArrowRightIcon color="link" aria-hidden="true" />
    </FlexiCell.Adornment>
  }
>
  <GiftPictogram mode="duo" className="h-[50px] w-[50px]" aria-hidden="true" />
  <h3 className="typography-body-8 font-normal">Westpac specials and product offers</h3>
  <FlexiCell.Hint>Discounts and cashback from select merchants & product offers from Westpac</FlexiCell.Hint>
</FlexiCell>
```

### Flexi cell with image usage

```jsx
<FlexiCell tag="a" href="#" withBorder body>
  <img
    src="https://images.unsplash.com/photo-1657299170950-87e5b0eaf77c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1740&q=80"
    alt=""
    className="mb-2 block w-full"
  />
  <FlexiCell.Label className="mb-[0.5rem]">MYER</FlexiCell.Label>
  <h3 className="typography-body-8 font-normal">Westpac specials and product offers</h3>
</FlexiCell>
```

### Sticky footer example usage

```jsx
<div className="flex flex-col gap-2 lg:flex-row">
  {[
    'Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem quae possimus, nam nobis cumque ullam et harum, magni quam distinctio, corporis sunt saepe maxime quod. Sapiente voluptatibus sint dicta tenetur.',
    'Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem quae possimus, nam nobis cumque ullam et harum, magni quam distinctio, corporis sunt saepe.',
    'Lorem ipsum dolor sit amet',
  ].map(title => (
    <FlexiCell
      key={title}
      withBorder
      badge={
        <Badge className="block" color="primary">
          Badge
        </Badge>
      }
    >
      <FlexiCell.Body>
        <img
          src="https://images.unsplash.com/photo-1657299170950-87e5b0eaf77c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1740&q=80"
          alt=""
          className="mb-2 block w-full"
        />
        <FlexiCell.Label className="mb-[0.5rem]">MYER</FlexiCell.Label>
        <h3 className="typography-body-8 font-normal">{title}</h3>
      </FlexiCell.Body>
      <FlexiCell.Footer>
        <Button size="small" soft>
          Share
        </Button>
      </FlexiCell.Footer>
    </FlexiCell>
  ))}
</div>
```

### Account list usage

```jsx
() => {
  const MOCK_ACCOUNTS = [
    {
      title: 'Cash',
      id: 'cash',
      accounts: [
        {
          name: 'Westpac Choice',
          amount: '$1,234.99',
          number: '732-123 746587',
        },
        {
          name: 'Offset account for loan',
          amount: '$20,000.00',
          number: '732-123 123456',
        },
      ],
    },
    {
      title: 'Foreign currency',
      id: 'foreign-currency',
      accounts: [
        {
          name: 'US Dollar Currency Account',
          amount: '$3,957.57',
          number: '123-456 1234567',
        },
        {
          name: 'British pound Currency Account',
          amount: '$9,999,999,999.99',
          number: '123-456 1234567',
        },
      ],
    },
    {
      title: 'Credit cards',
      id: 'credit-cards',
      accounts: [
        {
          name: 'Altitude Black World Mastercard',
          amount: '-$3,957.57',
          number: 'Card ending in 1234',
        },
      ],
    },
  ];

  return (
    <div className="flex flex-col gap-2">
      {MOCK_ACCOUNTS.map(({ title, id, accounts }) => (
        <div key={id} className="flex flex-col gap-3">
          <h3 className="m-0 font-normal">{title}</h3>
          <div className="flex flex-col gap-2">
            {accounts.map(({ name, amount, number }) => (
              <FlexiCell
                tag="a"
                href="#"
                body
                withBorder
                key={name}
                after={
                  <FlexiCell.Adornment align="top">
                    <FlexiCell.Label className="font-semibold" tag="h4">
                      {amount}
                    </FlexiCell.Label>
                    <FlexiCell.Hint>available</FlexiCell.Hint>
                  </FlexiCell.Adornment>
                }
              >
                <FlexiCell.Label className="font-normal" tag="h4">
                  {name}
                </FlexiCell.Label>
                <FlexiCell.Hint>{number}</FlexiCell.Hint>
              </FlexiCell>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
};
```

### Payee list usage

```jsx
() => {
  const MOCK_PAYEES = [
    {
      title: 'Recently Paid',
      id: 'recently-paid',
      payees: [
        {
          initials: 'AJ',
          name: 'Andrew Jones',
          paidAt: 'Fri 5 Aug',
          number: '123-986 463846',
        },
        {
          initials: 'JW',
          name: 'Joss Wight',
          paidAt: 'Mon 1 Aug',
          number: '098-567 465352',
        },
      ],
    },
    {
      title: 'A',
      id: 'a',
      payees: [
        {
          initials: 'AO',
          name: 'Active OOSH',
          number: '857-434 856383',
          paidAt: undefined,
        },
        {
          initials: 'AC',
          name: 'Alice Cartwright',
          number: '950-456 345363',
          paidAt: undefined,
        },
      ],
    },
    {
      title: 'B',
      id: 'b',
      payees: [
        {
          initials: 'BN',
          name: 'Benjamin North',
          number: '098-123 745362',
          paidAt: undefined,
        },
      ],
    },
  ];

  return (
    <div className="flex flex-col gap-2">
      {MOCK_PAYEES.map(({ title, id, payees }) => (
        <div key={id} className="flex flex-col gap-3">
          <h3 className="m-0 border-b border-border pb-1 font-normal">{title}</h3>
          <div className="flex flex-col gap-3">
            {payees.map(({ name, initials, paidAt, number }) => {
              return (
                <FlexiCell
                  {...(paidAt ? { href: '#', tag: 'a' } : { tag: 'div' })}
                  key={name}
                  className="group"
                  body
                  before={
                    <FlexiCell.Adornment align="top">
                      <FlexiCell.Circle className="bg-muted text-white" aria-hidden="true">
                        {initials}
                      </FlexiCell.Circle>
                    </FlexiCell.Adornment>
                  }
                  after={
                    <FlexiCell.Adornment align="center">
                      {paidAt ? (
                        <FlexiCell.Hint tag="h4">{paidAt}</FlexiCell.Hint>
                      ) : (
                        <FlexiCell.Button href="/somewhere" iconBefore={InfoIcon} aria-label="more info" />
                      )}
                    </FlexiCell.Adornment>
                  }
                >
                  {paidAt ? (
                    <>
                      <FlexiCell.Label className="font-medium" tag="h4">
                        {name}
                      </FlexiCell.Label>
                      <FlexiCell.Hint>{number}</FlexiCell.Hint>
                    </>
                  ) : (
                    <a href="#" className="text-[inherit] decoration-[inherit]">
                      <FlexiCell.Label className="font-medium" tag="h4">
                        {name}
                      </FlexiCell.Label>
                      <FlexiCell.Hint>{number}</FlexiCell.Hint>
                    </a>
                  )}
                </FlexiCell>
              );
            })}
          </div>
        </div>
      ))}
    </div>
  );
};
```

### Country list usage

```jsx
() => {
  const MOCK_COUNTRIES = [
    {
      title: 'Popular',
      id: 'popular',
      payees: [
        {
          code: 'IN',
          name: 'India',
        },
        {
          code: 'UK',
          name: 'United Kingdom',
        },
        {
          code: 'USA',
          name: 'United States',
        },
      ],
    },
    {
      title: 'A',
      id: 'a',
      payees: [
        {
          code: 'AI',
          name: 'Ascension Islands',
        },
        {
          code: 'AN',
          name: 'Andorra',
        },
        {
          code: 'UA',
          name: 'United Arab Emirates',
        },
        {
          code: 'AF',
          name: 'Afghanistan',
        },
      ],
    },
  ];

  return (
    <div className="flex flex-col gap-2">
      {MOCK_COUNTRIES.map(({ title, id, payees }) => (
        <div key={id} className="flex flex-col gap-3">
          <h3 className="m-0 border-b border-b-border pb-1 font-normal">{title}</h3>
          <div className="flex flex-col gap-3">
            {payees.map(({ name }) => {
              return (
                <FlexiCell
                  tag="a"
                  href="#"
                  withBorder
                  body
                  key={name}
                  before={
                    <FlexiCell.Adornment align="top">
                      <svg
                        width="30"
                        height="24"
                        viewBox="0 0 640 480"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                        aria-hidden="true"
                      >
                        <path d="M0 0H640V480H0V0Z" fill="white" />
                        <path d="M0 0H213.3V480H0V0Z" fill="#002654" />
                        <path d="M426.7 0H640V480H426.7V0Z" fill="#CE1126" />
                      </svg>
                    </FlexiCell.Adornment>
                  }
                >
                  <FlexiCell.Label className="font-medium" tag="span">
                    {name}
                  </FlexiCell.Label>
                </FlexiCell>
              );
            })}
          </div>
        </div>
      ))}
    </div>
  );
};
```

### Foreign currency list usage

```jsx
() => {
  const MOCK_PAYEES = [
    {
      title: 'Recently Paid',
      id: 'recently-paid',
      payees: [
        {
          initials: 'AJ',
          name: 'Andrew Jones',
          paidAt: 'Fri 5 Aug',
          number: '123-986 463846',
        },
        {
          initials: 'JW',
          name: 'Joss Wight',
          paidAt: 'Mon 1 Aug',
          number: '098-567 465352',
        },
      ],
    },
    {
      title: 'A',
      id: 'a',
      payees: [
        {
          initials: 'AO',
          name: 'Active OOSH',
          number: '857-434 856383',
          paidAt: undefined,
        },
        {
          initials: 'AC',
          name: 'Alice Cartwright',
          number: '950-456 345363',
          paidAt: undefined,
        },
      ],
    },
    {
      title: 'B',
      id: 'b',
      payees: [
        {
          initials: 'BN',
          name: 'Benjamin North',
          number: '098-123 745362',
          paidAt: undefined,
        },
      ],
    },
  ];

  return (
    <div className="flex flex-col gap-2">
      {MOCK_PAYEES.map(({ title, id, payees }) => (
        <div key={id} className="flex flex-col gap-3">
          <h3 className="m-0 border-b border-b-border pb-1 font-normal">{title}</h3>
          <div className="flex flex-col gap-3">
            {payees.map(({ name, paidAt, number }) => {
              return (
                <FlexiCell
                  {...(paidAt ? { href: '#', tag: 'a' } : { tag: 'div' })}
                  body
                  className="group"
                  key={name}
                  before={
                    <FlexiCell.Adornment align="top">
                      <svg
                        width="30"
                        height="24"
                        viewBox="0 0 640 480"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                        aria-label="French flag"
                      >
                        <path d="M0 0H640V480H0V0Z" fill="white" />
                        <path d="M0 0H213.3V480H0V0Z" fill="#002654" />
                        <path d="M426.7 0H640V480H426.7V0Z" fill="#CE1126" />
                      </svg>
                    </FlexiCell.Adornment>
                  }
                  after={
                    <FlexiCell.Adornment align="center">
                      {paidAt ? (
                        <FlexiCell.Hint tag="h4">{paidAt}</FlexiCell.Hint>
                      ) : (
                        <FlexiCell.Button href="/somewhere" iconBefore={InfoIcon} aria-label="more info" />
                      )}
                    </FlexiCell.Adornment>
                  }
                >
                  {paidAt ? (
                    <>
                      <FlexiCell.Label className="font-medium" tag="h4">
                        {name}
                      </FlexiCell.Label>
                      <FlexiCell.Hint>{number}</FlexiCell.Hint>
                    </>
                  ) : (
                    <a href="#" className="text-[inherit] decoration-[inherit]">
                      <FlexiCell.Label className="font-medium" tag="h4">
                        {name}
                      </FlexiCell.Label>
                      <FlexiCell.Hint>{number}</FlexiCell.Hint>
                    </a>
                  )}
                </FlexiCell>
              );
            })}
          </div>
        </div>
      ))}
    </div>
  );
};
```

### Promo tiles horizontal list usage

```jsx
() => {
  const MOCK_PROMOS = [
    {
      title: 'This is talking about the bonus.',
      subtitle: 'This is more about the bonus and all the other exciting things about this.',
      stars: true,
    },
    {
      title: 'This is a longer heading talking all about the bonus this one wraps.',
      subtitle: 'This is more about the bonus',
      stars: false,
    },
    {
      title: 'This is talking about the bonus.',
      subtitle: 'This is more about the bonus and all the other exciting things about this.',
      stars: false,
    },
    {
      title: 'This is a longer heading talking all about the bonus this one wraps.',
      subtitle: 'This is more about the bonus',
      stars: false,
    },
  ];

  return (
    <div className="flex flex-col gap-2">
      {MOCK_PROMOS.map(({ title, subtitle, stars }) => {
        return (
          <FlexiCell
            tag="a"
            href="#"
            key={title}
            withBorder
            body
            before={
              <FlexiCell.Adornment align="center">
                <Circle className="h-[70px] w-[70px]">Target</Circle>
              </FlexiCell.Adornment>
            }
            badge={
              <Badge className="block" color="hero" aria-hidden={stars && 'true'}>
                {stars ? '✭' : 'Corner flag'}
              </Badge>
            }
          >
            <small>MYER</small>
            <FlexiCell.Label className="font-medium" tag="h4">
              {title}
            </FlexiCell.Label>
            <FlexiCell.Hint>{subtitle}</FlexiCell.Hint>
            <div className="mt-2 flex gap-2">
              <Badge color="primary">Badge1</Badge>
              <Badge color="primary">Badge2</Badge>
            </div>
          </FlexiCell>
        );
      })}
    </div>
  );
};
```

### Promo tiles vertical list usage

```jsx
() => {
  const MOCK_PROMOS = [
    {
      title: 'This is talking about the bonus.',
      subtitle: 'This is more about the bonus and all the other exciting things about this.',
      stars: true,
    },
    {
      title: 'This is a longer heading talking all about the bonus this one wraps.',
      subtitle: 'This is more about the bonus',
      stars: false,
    },
    {
      title: 'This is talking about the bonus.',
      subtitle: 'This is more about the bonus and all the other exciting things about this.',
      stars: false,
    },
    {
      title: 'This is a longer heading talking all about the bonus this one wraps.',
      subtitle: 'This is more about the bonus',
      stars: false,
    },
  ];

  return (
    <div className="flex flex-col gap-2">
      <div className="flex gap-3">
        {MOCK_PROMOS.map(({ title, subtitle }) => (
          <FlexiCell
            withBorder
            key={title}
            className="group"
            badge={
              <Badge className="block" color="hero">
                Badge
              </Badge>
            }
          >
            <FlexiCell.Body tag="a" href="#" className="text-[inherit] decoration-[inherit]">
              <img
                src="https://images.unsplash.com/photo-1657299170950-87e5b0eaf77c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1740&q=80"
                alt=""
                className="block h-[63px] w-full object-cover"
              />
              <small>MYER</small>
              <FlexiCell.Label className="font-medium" tag="h4">
                {title}
              </FlexiCell.Label>
              <FlexiCell.Hint>{subtitle}</FlexiCell.Hint>
            </FlexiCell.Body>
            <FlexiCell.Footer>
              <div className="mt-2 flex gap-2">
                <a href="#">
                  <Badge color="primary">Badge1</Badge>
                </a>
                <a href="#">
                  <Badge color="primary">Badge2</Badge>
                </a>
              </div>
            </FlexiCell.Footer>
          </FlexiCell>
        ))}
      </div>
    </div>
  );
};
```

### Product tiles usage

```jsx
() => {
  const MOCK_PRODUCTS = [
    {
      title: 'This is talking about the bonus.',
      subtitle: 'This is more about the bonus and all the other exciting things about this.',
    },
    {
      title: 'This is a longer heading talking all about the bonus this one wraps.',
      subtitle: 'This is more about the bonus',
    },
    {
      title: 'This is talking about the bonus.',
      subtitle: 'This is more about the bonus and all the other exciting things about this.',
    },
  ];

  return (
    <div className="flex flex-col gap-2">
      {MOCK_PRODUCTS.map(({ title, subtitle }) => (
        <FlexiCell tag="a" href="#" withBorder withArrow body key={title} after={<TickCircleIcon color="success" />}>
          <div className="flex flex-col gap-2 md:flex-row">
            <GiftPictogram mode="duo" className="h-[24px] w-[24px]" aria-hidden="true" />
            <div className="flex flex-col gap-1">
              <FlexiCell.Label className="font-medium" tag="h4">
                {title}
              </FlexiCell.Label>
              <FlexiCell.Hint>{subtitle}</FlexiCell.Hint>
            </div>
          </div>
        </FlexiCell>
      ))}
    </div>
  );
};
```
