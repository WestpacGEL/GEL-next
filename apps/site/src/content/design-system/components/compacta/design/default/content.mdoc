Below is an example of how a Compacta may be used with fields and inputs. Any form related elements can exist inside a Compacta.

```tsx
() => {
  const { register, watch, setValue } = useForm<Inputs>({
    defaultValues: { items: [{ primary: '', secondary: '', tertiary: '' }] },
  });
  const items = watch('items');

  const handleAdd = useCallback(() => {
    setValue('items', [...items, { primary: '', secondary: '', tertiary: '' }]);
  }, [items, setValue]);

  return (
    <Form>
      <Compacta onAdd={handleAdd}>
        {items.map((item, index) => (
          <CompactaItem
            key={index}
            title={{ primary: item.primary, secondary: item.secondary, tertiary: item.tertiary }}
            onRemove={() => {
              setValue('items', [...items.slice(0, index), ...items.slice(index + 1)]);
            }}
          >
            <FormGroup>
              <FormLabel htmlFor={`primary.${index}.primary`}>Primary</FormLabel>
              <FormHint id={`primary-hint`}>Primary title text</FormHint>
              <Input aria-describedby={`primary-hint`} {...register(`items.${index}.primary`)} />
            </FormGroup>
            <FormGroup>
              <FormLabel htmlFor={`secondary.${index}.secondary`}>Secondary</FormLabel>
              <FormHint id={`secondary-hint`}>Secondary title text</FormHint>
              <Input aria-describedby={`secondary-hint`} {...register(`items.${index}.secondary`)} />
            </FormGroup>
            <FormGroup>
              <FormLabel htmlFor={`tertiary.${index}.tertiary`}>Tertiary</FormLabel>
              <FormHint id={`tertiary-hint`}>Tertiary title text</FormHint>
              <Input aria-describedby={`tertiary-hint`} id={`tertiary`} {...register(`items.${index}.tertiary`)} />
            </FormGroup>
          </CompactaItem>
        ))}
      </Compacta>
    </Form>
  );
};
```
