Use the appropriate modal size to suit your content. A modal will always responsively, re-size itself to fit the view port it appears in. Select from the buttons below to view the modals.

```tsx
() => {
  const stateSM = useOverlayTriggerState({});
  const stateMD = useOverlayTriggerState({});
  const stateLG = useOverlayTriggerState({});

  const states = useMemo(() => {
    return {
      sm: stateSM,
      md: stateMD,
      lg: stateLG,
    };
  }, [stateSM, stateMD, stateLG]);

  return (
    <div className="flex justify-center gap-4">
      {[{ size: 'sm', label: 'Small'}, { size: 'md', label: 'Default'}, { size: 'lg', label: 'Large'}].map(({ size, label }: { size: string; label: string; }) => (
        <Fragment key={size}>
          <Modal isDismissable size={size} state={states[size as 'sm' | 'md' | 'lg']} title="Sudden and magnificent">
            <ModalBody>
              <p>
                The line of the horizon was clear and hard against the sky, and in one particular quarter it showed black against a silvery climbing phosphorescence that grew and grew.
              </p>
            </ModalBody>
            <ModalFooter
              primaryLabel="Label"
              primaryOnClick={states[size as 'sm' | 'md' | 'lg'].close}
              secondaryLabel="Label"
              secondaryOnClick={states[size as 'sm' | 'md' | 'lg'].close}
            />
          </Modal>
          <Button soft look="primary" onClick={states[size as 'sm' | 'md' | 'lg'].open}>{label} Modal</Button>
        </Fragment>
      ))}
    </div>
  );
};
```
