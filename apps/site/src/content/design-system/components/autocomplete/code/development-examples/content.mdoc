### Default accordion

```jsx
<Autocomplete aria-label="Animals">
  <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
  <AutocompleteItem key="cat">Cat</AutocompleteItem>
  <AutocompleteItem key="dog">Dog</AutocompleteItem>
  <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
  <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
  <AutocompleteItem key="snake">Snake</AutocompleteItem>
</Autocomplete>
```

### Controlled

```tsx
() => {
  const [selectedKey, setSelectedKey] = useState<Key>();
  const handleSelectionChange = (key: Key) => {
    setSelectedKey(key);
  };
  return (
    <Autocomplete onSelectionChange={handleSelectionChange} selectedKey={selectedKey} aria-label="Animals">
      <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
      <AutocompleteItem key="cat">Cat</AutocompleteItem>
      <AutocompleteItem key="dog">Dog</AutocompleteItem>
      <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
      <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
      <AutocompleteItem key="snake">Snake</AutocompleteItem>
    </Autocomplete>
  );
};
```

### Invalid

```jsx
<Autocomplete aria-label="Animals" invalid>
  <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
  <AutocompleteItem key="cat">Cat</AutocompleteItem>
  <AutocompleteItem key="dog">Dog</AutocompleteItem>
  <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
  <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
  <AutocompleteItem key="snake">Snake</AutocompleteItem>
</Autocomplete>
```

### Disabled

```jsx
<Autocomplete aria-label="Animals" disabled>
  <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
  <AutocompleteItem key="cat">Cat</AutocompleteItem>
  <AutocompleteItem key="dog">Dog</AutocompleteItem>
  <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
  <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
  <AutocompleteItem key="snake">Snake</AutocompleteItem>
</Autocomplete>
```

### Sizes

```tsx
() => {
  const [selectedKey, setSelectedKey] = useState<Key>();
  const handleSelectionChange = (key: Key) => {
    setSelectedKey(key);
  };
  return (
    <Fragment>
      {(['small', 'medium', 'large', 'xlarge'] as const).map(size => (
        <div className="py-2" key={size}>
          <Autocomplete label={size} size={size} aria-label={`size ${size}`}>
            <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
            <AutocompleteItem key="cat">Cat</AutocompleteItem>
            <AutocompleteItem key="dog">Dog</AutocompleteItem>
            <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
            <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
            <AutocompleteItem key="snake">Snake</AutocompleteItem>
          </Autocomplete>
        </div>
      ))}
    </Fragment>
  );
};
```

### Footer

```jsx
<Autocomplete aria-label="Animals" disabled footer={<h3>Footer message</h3>}>
  <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
  <AutocompleteItem key="cat">Cat</AutocompleteItem>
  <AutocompleteItem key="dog">Dog</AutocompleteItem>
  <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
  <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
  <AutocompleteItem key="snake">Snake</AutocompleteItem>
</Autocomplete>
```

### Dynamic Collections

```tsx
() => {
  const options = [
    { id: 'red panda', name: 'Red Panda' },
    { id: 'cat', name: 'Cat' },
    { id: 'dog', name: 'Dog' },
    { id: 'aardvark', name: 'Aardvark' },
    { id: 'kangaroo', name: 'Kangaroo' },
    { id: 'snake', name: 'Snake' },
  ];
  return (
    <div className="flex flex-col gap-2">
      <Autocomplete aria-label="Animals" defaultItems={options}>
        {item => <AutocompleteItem>{item.name}</AutocompleteItem>}
      </Autocomplete>
    </div>
  );
};
```

### Dynamic Collections with Async Call

```tsx
() => {
  // For example purposes async call is made on focus of input rather than when page loads
  const [loading, setLoading] = useState(false);
  const [items, setItems] = useState<{ id: string; name: string }[]>([]);
  const getCollection = async () => {
    setLoading(true);
    await new Promise(resolve => setTimeout(resolve, 3000));
    setItems([
      { id: 'red panda', name: 'Red Panda' },
      { id: 'cat', name: 'Cat' },
      { id: 'dog', name: 'Dog' },
      { id: 'aardvark', name: 'Aardvark' },
      { id: 'kangaroo', name: 'Kangaroo' },
      { id: 'snake', name: 'Snake' },
    ]);
    setLoading(false);
  };

  return (
    <div className="flex flex-col gap-2">
      <Autocomplete items={items} onFocus={getCollection} loadingState={loading}>
        {item => <AutocompleteItem>{item.name}</AutocompleteItem>}
      </Autocomplete>
    </div>
  );
};
```

### Customised Items

```jsx
<Autocomplete aria-label="Animals">
  <AutocompleteItem key="BSB">
    <div className="flex flex-col">
      <h3 className="typography-body-9 font-medium">Business Name</h3>
      <p>12 345 678 910</p>
    </div>
  </AutocompleteItem>,
  <AutocompleteItem key="staff">
    <div className="flex items-center gap-2">
      <Circle className="size-5 bg-muted text-white">SN</Circle>
      <div className="flex flex-col ">
        <h3 className="typography-body-9">Staff Name</h3>
        <p className="typography-body-10 text-borderDark group-hover:text-white group-[.is-focused]:text-white">
          Staff role, staff business area
        </p>
      </div>
    </div>
  </AutocompleteItem>
</Autocomplete>
```
