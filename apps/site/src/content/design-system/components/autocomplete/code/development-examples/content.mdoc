### Default

```jsx
<Autocomplete aria-label="Animals">
  <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
  <AutocompleteItem key="cat">Cat</AutocompleteItem>
  <AutocompleteItem key="dog">Dog</AutocompleteItem>
  <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
  <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
  <AutocompleteItem key="snake">Snake</AutocompleteItem>
</Autocomplete>
```

### Controlled

```tsx
() => {
  const [selectedKey, setSelectedKey] = useState<Key>();
  const handleSelectionChange = (key: Key) => {
    setSelectedKey(key);
  };
  return (
    <Autocomplete onSelectionChange={handleSelectionChange} selectedKey={selectedKey} aria-label="Animals">
      <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
      <AutocompleteItem key="cat">Cat</AutocompleteItem>
      <AutocompleteItem key="dog">Dog</AutocompleteItem>
      <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
      <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
      <AutocompleteItem key="snake">Snake</AutocompleteItem>
    </Autocomplete>
  );
};
```

### Invalid

```jsx
<Autocomplete aria-label="Animals" invalid>
  <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
  <AutocompleteItem key="cat">Cat</AutocompleteItem>
  <AutocompleteItem key="dog">Dog</AutocompleteItem>
  <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
  <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
  <AutocompleteItem key="snake">Snake</AutocompleteItem>
</Autocomplete>
```

### Disabled

```jsx
<Autocomplete aria-label="Animals" disabled>
  <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
  <AutocompleteItem key="cat">Cat</AutocompleteItem>
  <AutocompleteItem key="dog">Dog</AutocompleteItem>
  <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
  <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
  <AutocompleteItem key="snake">Snake</AutocompleteItem>
</Autocomplete>
```

### Sizes

```tsx
() => {
  const [selectedKey, setSelectedKey] = useState<Key>();
  const handleSelectionChange = (key: Key) => {
    setSelectedKey(key);
  };
  return (
    <Fragment>
      {(['small', 'medium', 'large', 'xlarge'] as const).map(size => (
        <div className="py-2" key={size}>
          <Autocomplete label={size} size={size} aria-label={`size ${size}`}>
            <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
            <AutocompleteItem key="cat">Cat</AutocompleteItem>
            <AutocompleteItem key="dog">Dog</AutocompleteItem>
            <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
            <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
            <AutocompleteItem key="snake">Snake</AutocompleteItem>
          </Autocomplete>
        </div>
      ))}
    </Fragment>
  );
};
```

### Footer

```jsx
<Autocomplete aria-label="Animals" disabled footer={<h3>Footer message</h3>}>
  <AutocompleteItem key="red panda">Red Panda</AutocompleteItem>
  <AutocompleteItem key="cat">Cat</AutocompleteItem>
  <AutocompleteItem key="dog">Dog</AutocompleteItem>
  <AutocompleteItem key="aardvark">Aardvark</AutocompleteItem>
  <AutocompleteItem key="kangaroo">Kangaroo</AutocompleteItem>
  <AutocompleteItem key="snake">Snake</AutocompleteItem>
</Autocomplete>
```

### Dynamic Collections

```tsx
() => {
  const options = [
    { id: 'red panda', name: 'Red Panda' },
    { id: 'cat', name: 'Cat' },
    { id: 'dog', name: 'Dog' },
    { id: 'aardvark', name: 'Aardvark' },
    { id: 'kangaroo', name: 'Kangaroo' },
    { id: 'snake', name: 'Snake' },
  ];
  return (
    <div className="flex flex-col gap-2">
      <Autocomplete aria-label="Animals" defaultItems={options}>
        {item => <AutocompleteItem>{item.name}</AutocompleteItem>}
      </Autocomplete>
    </div>
  );
};
```

### Dynamic Collections with Async Call

```tsx
() => {
  // For example purposes async call is made on focus of input rather than when page loads
  const [loading, setLoading] = useState(false);
  const [items, setItems] = useState<{ id: string; name: string }[]>([]);
  const getCollection = async () => {
    setLoading(true);
    await new Promise(resolve => setTimeout(resolve, 3000));
    setItems([
      { id: 'red panda', name: 'Red Panda' },
      { id: 'cat', name: 'Cat' },
      { id: 'dog', name: 'Dog' },
      { id: 'aardvark', name: 'Aardvark' },
      { id: 'kangaroo', name: 'Kangaroo' },
      { id: 'snake', name: 'Snake' },
    ]);
    setLoading(false);
  };

  return (
    <div className="flex flex-col gap-2">
      <Autocomplete items={items} onFocus={getCollection} loadingState={loading}>
        {item => <AutocompleteItem>{item.name}</AutocompleteItem>}
      </Autocomplete>
    </div>
  );
};
```

### Customised Items

```jsx
() => {
  const options = [
    { name: 'Oliver Bennett', initials: 'OB', role: 'Compliance Officer, Legal' },
    { name: 'Mia Chandler', initials: 'MC', role: 'Financial Analyst, Finance' },
    { name: 'Zoe Chang', initials: 'ZC', role: 'UX Designer, Product Design' },
    { name: "Lucas D'Souza", initials: 'LD', role: 'Cybersecurity Specialist, Information Security' },
  ];
  return (
    <Autocomplete width="30" aria-label="Staff directory" defaultItems={options}>
      {item => (
        <AutocompleteItem key={item.name} textValue={item.name}>
          <div className="flex items-center gap-2">
            <Circle className="size-5 bg-muted text-text-mono">{item.initials}</Circle>
            <div className="flex flex-col ">
              <h3 className="typography-body-9">{item.name}</h3>
              <p className="typography-body-10 text-borderDark group-hover:text-text-mono group-[.is-focused]:text-text-mono">
                {item.role}
              </p>
            </div>
          </div>
        </AutocompleteItem>
      )}
    </Autocomplete>
  );
};
```

### More customised Items

```jsx
() => {
  const options = [
    { name: 'Nimbus Analytics Pty Ltd', abn: '123 456 789' },
    { name: 'Blueleaf Financial Group', abn: '987 654 321' },
    { name: 'Ironclad Risk Solutions', abn: '456 789 123' },
    { name: 'Summit Edge Advisory', abn: '321 654 987' },
  ];
  return (
    <Autocomplete
      noOptionsMessage="No options found, try a different spelling"
      width="30"
      aria-label="Business directory"
      defaultItems={options}
    >
      {item => (
        <AutocompleteItem key={item.name} textValue={item.name}>
          <div className="flex items-center gap-2">
            <div className="flex flex-col ">
              <h3 className="typography-body-9">{item.name}</h3>
              <p className="typography-body-10 text-borderDark group-hover:text-text-mono group-[.is-focused]:text-text-mono">
                {item.abn}
              </p>
            </div>
          </div>
        </AutocompleteItem>
      )}
    </Autocomplete>
  );
};
```
