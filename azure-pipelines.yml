trigger:
- main
stages:
- stage: Snyk
  pool:
    vmImage: 'ubuntu-latest'
    variables:
    pnpm_config_cache: $(Pipeline.Workspace)/.pnpm-store  
  jobs:
  - job: snyk
    steps:
    - task: UseNode@1
      inputs:
        version: '18.x'
      displayName: 'Install Node.js'
    - task: Cache@2
      inputs:
        key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
        path: $(pnpm_config_cache)
      displayName: Cache pnpm

    - script: |
        corepack enable
        corepack prepare pnpm@8.2 --activate
        pnpm config set store-dir $(pnpm_config_cache)
      displayName: "Setup pnpm"

    - script: |
        pnpm install
      displayName: "pnpm install"
    - task: CmdLine@2
      displayName: "Snyk scan"
      inputs:
        script: |
          docker run --rm \
            --env SNYK_TOKEN \
            --env DEBUG=1 \
            -v $(Build.SourcesDirectory):/app \
            snyk/snyk:node-18 snyk monitor --all-projects --org=${SNYK_ORG_ID} --remote-repo-url=GEL-next --project-tags=applicationid=A00C6A,componenttype=ui,buildnumber=0.0.$(Build.BuildId)
      env:
        SNYK_TOKEN: $(SNYK_TOKEN)
        SNYK_ORG_ID: $(SNYK_ORG_ID)

- stage: Fortify
  jobs:
  - job: fortify
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: 'Create dist folder'
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p $(Build.SourcesDirectory)/.dist/src 
          mkdir -p $(Build.SourcesDirectory)/.dist/lib && echo '' >> $(Build.SourcesDirectory)/.dist/lib/blank.txt 
          rsync -aF -m $(Build.SourcesDirectory)/ $(Build.SourcesDirectory)/.dist/src/
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/.dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/source.zip'
